final List<String> kTitles = [
  'Основы программирования',
  'Техноэтика',
  'Алгоритмы и структуры данных',
];

final List<String> kTerms = [
  // Основы программирования
  '''
Основы программирования включают в себя базовые концепции создания компьютерных программ, таких как переменные, типы данных, операторы и условия, циклы, а также функции и модули. Эти фундаментальные принципы лежат в основе любых языков программирования, будь то C, Java, Python или Kotlin. Изучение основ программирования начинается с понимания логики решения задач, умения разбивать сложные проблемы на подзадачи и формулировать четкие инструкции для компьютера. По мере овладения этими принципами программист учится работать с памятью, хранить и обрабатывать данные, а также использовать стандартные библиотеки для эффективного решения широкого круга задач. Знание основ программирования необходимо для освоения более сложных концепций, таких как объектно-ориентированное программирование, параллельные вычисления или разработка распределённых систем.
  ''',

  // Техноэтика
  '''
Техноэтика — это область знаний, рассматривающая моральные и социальные аспекты использования технологий. Она возникает на пересечении философии, информатики, социологии, права и психологии, где стремится определить, как технологические инновации влияют на качество жизни, приватность, безопасность и равенство возможностей. В эпоху информационного общества техноэтика играет все более важную роль: вопросы сбора и анализа персональных данных, алгоритмическая предвзятость, распространение дезинформации, кибербезопасность и умные города — всё это становится предметом серьёзных дискуссий. Техноэтика помогает понять, как внедрение новых технологий может изменить структуру рабочего процесса, обострить социальные неравенства или, напротив, способствовать их преодолению, если разработчики и компании придерживаются принципов ответственного и справедливого использования достижений научно-технического прогресса.
  ''',

  // Алгоритмы и структуры данных
  '''
Алгоритмы и структуры данных являются фундаментом эффективной обработки информации и оптимизации вычислительных процессов. Алгоритмы — это чёткие пошаговые инструкции для решения определённых задач, например, сортировка массивов, поиск по дереву или определение кратчайшего пути в графе. Структуры данных, такие как массивы, списки, стеки, очереди, деревья и хеш-таблицы, определяют, как данные организованы в памяти и как к ним осуществляется доступ. Изучение алгоритмов и структур данных позволяет программистам оценивать сложность решений, выбирать наиболее подходящий подход к задаче и оптимизировать производительность. Это особенно важно в условиях большого объёма данных и ограниченных вычислительных ресурсов. Правильное понимание и применение алгоритмов и структур данных лежит в основе таких областей, как машинное обучение, анализ больших данных, системное программирование и разработка высоконагруженных веб-приложений.
  ''',
];

final List<String> kDefinitions = [
  // Основы программирования
  '''
Основы программирования формируют фундаментальное понимание того, как компьютер интерпретирует и исполняет код. Здесь программирование рассматривается не как знание определённого языка, а как умение мыслить алгоритмически. Любой начинающий программист учится последовательно преобразовывать идею в набор чётких инструкций, обращать внимание на детали и верифицировать корректность результатов. Изучение основ позволяет не просто запоминать синтаксис, а понимать принципы работы вычислительных систем. Это критически важно для дальнейшего роста, ведь без прочного фундамента невозможно перейти к сложным технологиям: объектно-ориентированным парадигмам, функциональному программированию, управлению памятью или межпроцессорным взаимодействиям. Сильный фундамент закладывает путь к инновациям и креативному решению задач.
  ''',

  // Техноэтика
  '''
Техноэтика как дисциплина выступает своего рода этическим компасом в мире стремительно развивающихся технологий. Она призывает разработчиков, исследователей, руководителей компаний и политиков задуматься о последствиях каждого внедряемого нововведения. Например, применение искусственного интеллекта в медицине открывает огромные возможности диагностики, но вызывает вопросы о правомерности обработки генетических данных и о том, кому принадлежат эти сведения. В сфере социальных сетей техноэтика обращается к проблемам манипуляции общественным мнением и распространения фейковых новостей. Необходимо найти баланс между коммерческими интересами, научным прогрессом и уважением к правам человека. Техноэтика требует прозрачности алгоритмов, ответственного отношения к использованию персональных данных и разработки регулятивных мер, направленных на предотвращение технологических злоупотреблений, тем самым способствуя формированию справедливого и гуманного цифрового будущего.
  ''',

  // Алгоритмы и структуры данных
  '''
Алгоритмы и структуры данных дают нам инструментарий для эффективной работы с информацией и решения сложных проблем. Понимание алгоритмических парадигм (жадные алгоритмы, динамическое программирование, деление и властвование), а также способность анализировать временную и пространственную сложность решений позволяют выбирать наиболее разумный подход к каждой задаче. Большие данные, искусственный интеллект, распределённые системы — во всех этих областях важность корректного подбора структур данных и алгоритмов невозможно переоценить. Например, эффективный алгоритм сортировки или поиска может многократно сократить затраты ресурсов, а оптимально подобранная структура данных минимизирует накладные расходы на хранение и извлечение информации. В конечном итоге, понимание этих основ — это ключ к созданию надёжных, быстрых и масштабируемых программных систем, способных удовлетворить постоянно растущие потребности современного технологического мира.
  ''',
];
